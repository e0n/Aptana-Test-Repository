<!--
  User: Tobi
  Date: 24.10.2012
 -->

    <style>
        body {
            margin: 1px;
            padding: 1px;
        }
        canvas {
            border: 1px solid #c3c3c3;
        }
    </style>
    <script>
        //variable for the sum of Nodes - is on 2 because of 2 standard nodes already existing

        var zoomOffset = 0;
        var baseUrl = '<?php echo $this->baseUrl(); ?>';

        var stage; //Global for accessing from mainMenuView
        var firstStage;

        //Layer for shapes
        var nodeLayer

        //Function for Mouse Location
        function writeMessage(messageLayer, message) {
            var context = messageLayer.getContext();
            messageLayer.clear();
            context.font = '18pt Calibri';
            context.fillStyle = 'black';
            context.fillText(message, 10, 25);
            context.fillText(sumOfNodes, 250, 25);
        }

        //onload function
        window.onload = function() {
            //Map stage
            stage = new Kinetic.Stage({
                container: "container"
            });

            //Set stage Dimensions
            stage.setHeight(screen.height - 250);
            stage.setWidth(screen.width - 10);

            // the following section is for zoom and drag the stage
            var backgroundLayer = new Kinetic.Layer({
                width: 10000,
                height: 7000
            });
            backgroundLayer.setDraggable("draggable");
            var background = new Kinetic.Rect({
                x: -10000,
                y: -10000,
                width: 20000,
                height: 20000,
                fill: "#000000",
                opacity: 0
            });
            backgroundLayer.add(background);

            var newScreenWidthScale = (screen.width / ( 1920 / 100)) / 100;
            var newScreenHeightScale = (screen.height / ( 1080 / 100)) / 100;

            var scaleValue = 'scale(' + newScreenWidthScale + ',' + newScreenHeightScale +')';

            $("header").css({
                '-moz-transform': scaleValue,
                '-webkit-transform': scaleValue,
                '-o-transform': scaleValue,
                '-ms-transform': scaleValue,
                'transform': scaleValue});
            $("footer").css({
                '-moz-transform': scaleValue,
                '-webkit-transform': scaleValue,
                '-o-transform': scaleValue,
                '-ms-transform': scaleValue,
                'transform': scaleValue});

            var headerOffset = $("header").offset();
            var top = '-' + headerOffset.top + 'px';
            var left = '-' + headerOffset.left + 'px';
            $("header").css("margin-top", top).css("margin-left", left);

            var canvasOffset = $(".kineticjs-content").offset();
            var canvasLeft = '-' + (canvasOffset.left - 70) + 'px';
            $(".kineticjs-content").css("margin-left", canvasLeft);

            background.on("mouseover touchstart", function(){
                stage.setDraggable(true);
            });

            background.on("mouseout touchend", function(){
                stage.setDraggable(false);
            });

            var zoom = function(e) {
                var zoomAmount = e.wheelDeltaY*0.001;
                if(zoomAmount == -0.12){
                    zoomOffset = zoomOffset-1;
                    if(zoomOffset == -5){
                        zoomAmount = 0;
                        zoomOffset = -4;
                    } else {
                    stage.setOffset (stage.getMousePosition().x, stage.getMousePosition().y );
                    stage.setScale(stage.getScale().x+zoomAmount);
                    stage.setX ( stage.getWidth()/2 );
                    stage.setY ( stage.getHeight()/2 );
                    }
                }
                if(zoomAmount == 0.12){
                    zoomOffset = zoomOffset+1;
                    if(zoomOffset == 5){
                        zoomAmount = 0;
                        zoomOffset = 4;
                    } else {
                    stage.setOffset (stage.getMousePosition().x, stage.getMousePosition().y );
                    stage.setScale(stage.getScale().x+zoomAmount);
                    stage.setX ( stage.getWidth()/2 );
                    stage.setY ( stage.getHeight()/2 );
                    }
                }
                stage.draw();
            };
            document.addEventListener("mousewheel", zoom, false);

            nodeLayer = new Kinetic.Layer();
            // MessageLayer for Mouseposition and other debug notes
            var messageLayer = new Kinetic.Layer();

            // Creating base node
            var base = new newNodeFactory.CreateBaseNode(stage, nodeLayer);
            nodeMarking.setMarked(base);

            //function for mouse coordinates on shape - only for debugging and development
            stage.on("mousemove", function() {
                var mousePos = stage.getMousePosition();
                writeMessage(messageLayer, 'x: ' + mousePos.x + ', y: ' + mousePos.y);
            });

            // add the layer to the stage
            stage.add(backgroundLayer);
            stage.add(nodeLayer);
            stage.add(messageLayer);

            //Save the stage to compare after changes have been made, for new map warning
            firstStage = stage;

        };

        //Functions for the side menu

        /**
         * Creates a new Ellipse
         */
        function NewEllipse(){
            new newNodeFactory.NewEllipseNode(nodeLayer, markedNode);
        }
        /**
         * Creates a new Rectangle
         */
        function NewRectangle(){
            var newNode = new newNodeFactory.NewRectNode(nodeLayer, markedNode);
            markedNode = newNode;
            editText();
        }
        /**
         * Copy a node
         */
        function CopyNode(){
            nodeToCopy = markedNode;
        }
        /**
         * Paste a node if a node was copied
         */
        function PasteNode(){
            if(nodeToCopy.typ == 'rect'){
                var nodeToPaste = new newNodeFactory.NewRectNode(nodeLayer, markedNode);
            } else {
                var nodeToPaste = new newNodeFactory.NewEllipseNode(nodeLayer, markedNode);
            }
            var text = nodeToCopy.getText();
            nodeToPaste.setText(text);
            nodeToPaste.fillBackground(nodeToPaste.text.getFill());
            nodeToPaste.text.setTextFill(nodeToPaste.text.getTextFill());
        }
        /**
         * Deletes the current marked node and all its children
         */
        function DeleteNode(){
            markedNode.deleteNode(nodeLayer);
            markedNode = baseNode;
            markedNode.fillBackground('#3D9DB3');
            nodeLayer.draw();
        }
        /**
         * @see hideChildren()
         */
        function HideNode(){
            markedNode.hideChildren(nodeLayer);
        }
        /**
         * @see showChildren()
         */
        function ShowNode(){
            markedNode.showChildren(nodeLayer);
        }

    </script>

<header>
    <h1>Open Your Mind</h1>
    <div id="welcome">
        Welcome, <?=$this->username?><br>
        <a id="logoutAction" href="login/logout" >Click here to logout</a>
    </div>
    <div id="mainmenu">
        <div id="menubutton"></div>
        <div id="menubody">
            <a href="#" id="text"></a>
            <div id="overlay"></div>
            <div id="menuPointer"></div>
            <div id="new"></div>
            <div id="save"></div>
            <div id="load"></div>
            <div id="import"></div>
            <div id="export"></div>
            <div id="logout"></div>
        </div>
    </div>
</header>
    <div id="Menu">
        <div>
            <span onclick="NewEllipse()">New Ellipse</span>
        </div>
        <div>
            <span onclick="NewRectangle()">New Rectangle</span>
        </div>
        <div>
            <span onclick="editText()">Edit Text</span>
        </div>
        <div>
            <span onclick="CopyNode()">Copy</span>
        </div>
        <div>
            <span onclick="PasteNode()">Paste</span>
        </div>
        <div>
            <span onclick="DeleteNode()">Delete</span>
        </div>
        <div>
            <span onclick="HideNode()">Hide</span>
        </div>
        <div>
            <span onclick="ShowNode()">Show</span>
        </div>
        <div>
            <span onclick="autoLayoutOnAndOff()">Toggle AutoLayout</span>
        </div>
    </div>
    <br>
    <br>
    <div id="container"></div>
    <input type="file" id="file"/>
    <output id="list"></output>
<script>
    function handleFileSelect(evt) {
        var files = evt.target.files; // FileList object

        // files is a FileList of File objects. List some properties.
        var output = [];
        for (var i = 0, f; f = files[i]; i++) {
            output.push('<li><strong>', escape(f.name), '</strong> (', f.type || 'n/a', ') - ',
                f.size, ' bytes, last modified: ',
                f.lastModifiedDate ? f.lastModifiedDate.toLocaleDateString() : 'n/a',
                '</li>');
        }
        document.getElementById('list').innerHTML = '<ul>' + output.join('') + '</ul>';
    }

    document.getElementById('files').addEventListener('change', handleFileSelect, false);
</script>
<footer>
    <div align="center" >Copyright Â© Open Your Mind 2012-2013</div>
    <div id="selectedNodeMenu" style="display: none;">
        <div id="top">
            <select id="font">
                <option id="0">Times New Roman</option>
                <option id="1">Arial</option>
                <option id="2">serif</option>
                <option id="3">sans-serif</option>
                <option id="4">cursive</option>
                <option id="5">fantasy</option>
                <option id="6">monospace</option>
            </select>
            <select id="size">
                <option id="8">8</option>
                <option id="9">9</option>
                <option id="10">10</option>
                <option id="11">11</option>
                <option id="12">12</option>
                <option id="14">14</option>
                <option id="16" selected="selected">16</option>
                <option id="18">18</option>
                <option id="20">20</option>
                <option id="24">24</option>
                <option id="28">28</option>
                <option id="32">32</option>
                <option id="36">36</option>
                <option id="48">48</option>
            </select>
        </div>
        <div id="bottom">
            <a href="#" id="bold"><b>F</b></a>
            <a href="#" id="italic"><i>K</i></a>
            <div id="colorSelector"><input class="color {pickerClosable:true}" style="visibility: hidden; width: 0px;"/></div>
            <div id="borderColorSelector"><input class="color {pickerClosable:true}" style="visibility: hidden; width: 0px;"/></div>
        </div>
    </div>
    <div id="saveDialog" title="Save" style="visibility: hidden;">
        <form>
            <fieldset>
                <label for="filename">Bitte geben Sie einen Dateinamen an.</label>
                <input type="text" name="name" id="filename" class="text ui-widget-content ui-corner-all" />
            </fieldset>
        </form>
    </div>
    <div id="newText" title="Umbenennen" style="visibility: hidden;">
        <form>
            <fieldset>
                <label for="enterText">Bitte geben Sie eine neue Bezeichnung ein</label>
                <input type="text" name="name" id="enterText" class="text ui-widget-content ui-corner-all" onfocus='this.value=" ";'/>
            </fieldset>
        </form>
    </div>
    <div id="derberDialog" style="visibility: hidden;">
        <p></p>
    </div>
    <div id="confirmDialog" style="visibility: hidden;">
        <p></p>
    </div>
    <div id="loadDialog" title="Load" style="visibility: hidden;">
        <div id="fileTree"></div>
    </div>
</footer>
